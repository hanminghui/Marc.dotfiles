# extends c.snippets
extends c

# ==================================================
# ┌────────────────────────────────────────────────┐
# │                    namespace                   │
# └────────────────────────────────────────────────┘

snippet un "using namesapce"
using namespace ${1:NAMESPACE};
endsnippet

snippet s: "std::"
std::
endsnippet

# ==================================================
# ┌────────────────────────────────────────────────┐
# │                     include                    │
# └────────────────────────────────────────────────┘

# ================ Utilities Library ===============

snippet incfun "functional" b
#include <functional>
endsnippet

snippet incchr "chrono" b
#include <chrono>
endsnippet

# ============ Dynamic memory management ===========

snippet incmem "memory" b
#include <memory>
endsnippet

# ================= Strings Library ================

snippet incstr "string" b
#include <string>
endsnippet

snippet str "string" w
std::string
endsnippet

# =============== Containers Library ===============

# --------------- Sequence Containers --------------

snippet incarr "array" b
#include <array>
endsnippet

snippet arr "array"
std::array<${1:TYPE}> ${2:NAME}
endsnippet

snippet incvec "vector" b
#include <vector>
endsnippet

snippet vec "vector"
std::vector<${1:TYPE}> ${2:NAME}
endsnippet

snippet incdqu "deque" b
#include <deque>
endsnippet

snippet inclis "list" b
#include <list>
endsnippet

snippet list "list"
std::list<${1:TYPE}> ${2:NAME}
endsnippet

snippet incflis "forward_list" b
#include <forward_list>
endsnippet

# ------------- Associative containers -------------

snippet incset "set" b
#include <set>
endsnippet

snippet set "set"
std::set<${1:TYPE}> ${2:NAME}
endsnippet

snippet incmap "map" b
#include <map>
endsnippet

snippet incuset "unordered_set" b
#include <unordered_set>
endsnippet

snippet incumap "unordered_map" b
#include <unordered_map>
endsnippet

# --------------- Container adaptors ---------------

snippet incsta "stack" b
#include <stack>
endsnippet

snippet incque "queue" b
#include <queue>
endsnippet

snippet incspa "span" b
#include <span>
endsnippet

# ================ Iterators Library ===============

snippet incite "iterator" b
#include <iterator>
endsnippet

# =============== Algorithms Library ===============

snippet incalg "algorithm" b
#include <algorithm>
endsnippet

# ================ Numerics Library ================

snippet inccma "cmath" b
#include <cmath>
endsnippet

snippet incran "random" b
#include <random>
endsnippet

# ============== Input/output Library ==============

snippet incio "iostream" b
#include <iostream>
endsnippet

# ============= Thread Support Library =============

snippet incthr "thread" b
#include <thread>
endsnippet

snippet incmut "mutex" b
#include <mutex>
endsnippet

snippet incfut "future" b
#include <future>
endsnippet

# ==================================================
# ┌────────────────────────────────────────────────┐
# │                  Input/Output                  │
# └────────────────────────────────────────────────┘

snippet cout "std::cout"
std::cout << ${1:out};
endsnippet

snippet couts "std::cout"
std::cout << "${1:out}";
endsnippet

snippet coute "std::cout"
std::cout << ${1:out} << std::endl;
endsnippet

snippet coutes "std::cout"
std::cout << "${1:out}" << std::endl;
endsnippet

snippet cin "std::cin"
std::cin >> ${1:IN};
endsnippet

