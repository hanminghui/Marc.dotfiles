# extends c.snippets
extends c

snippet np "nullptr" w
nullptr
endsnippet

# ==================================================
# ┌────────────────────────────────────────────────┐
# │                  Flow Control                  │
# └────────────────────────────────────────────────┘

# ----------------------- for ----------------------
snippet rfor "ranged for"
for(auto ${1:VALUE} : ${2:RANGE})
{
    ${3:STATEMENTS}
}
endsnippet

# ==================================================
# ┌────────────────────────────────────────────────┐
# │                    namespace                   │
# └────────────────────────────────────────────────┘

snippet un "using namesapce"
using namespace ${1:NAMESPACE};
endsnippet

snippet uns "using namesapce"
using namespace std;
endsnippet

snippet s; "std::" w
std::
endsnippet

# ==================================================
# ┌────────────────────────────────────────────────┐
# │                      Class                     │
# └────────────────────────────────────────────────┘

snippet class "class"
class ${1:NAME}
{
    ${2:MEMBERS}
};
endsnippet

snippet p,: "public:"
public:
endsnippet

snippet p.: "private:"
private:
endsnippet

# ==================================================
# ┌────────────────────────────────────────────────┐
# │                  My Functions                  │
# └────────────────────────────────────────────────┘

# ====================== split =====================
# if delimiter is at the beginning, the first substring is empty
# if delimiter is at the end, there is no last empty substring
# <vector> <string> needed
snippet split "cppsplit"
void split(const std::string& s,
		   const std::string& delimiter,
		   std::vector<std::string>& strs)
{
	int start = 0, pos = 0;
	while((pos = s.find(delimiter, start)) != -1)
	{
		strs.push_back(s.substr(start, pos-start));
		start = pos + delimiter.length();
	}
	if(start < s.length())
	    strs.push_back(s.substr(start, s.length() - start));
}
endsnippet
